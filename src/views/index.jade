!!! 5
//if IE 7
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 8
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 9
  html(lang="en", class="no-js ie9", data-ng-app="main", id="ng-app")
//if [(gt IE 9)|!(IE)] <!
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Gradle Introduction
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Gradle Introduction 2013")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")

  body
    .reveal
      .slides
        section
          section.index-section(data-state="index-slide")
            h2 Goldilocks' would use gradle 
            div an introduction to gradle 
            div {by Matt Payne} 
            div 10/15/2013

          section
            h2
              i.icon-github
            ul
              li These slides are up on GitHub!  
              ul
                li 
                  a(href="http://payne.github.io/Gradle2013Slides", target="_blank") payne.github.io/Gradle2013Slides
              li Source for these slides is also on GitHub 
              ul 
                li
                  a(href="https://github.com/payne/Gradle2013Slides", target="_blank") github.com/payne/Gradle2013Slides
              li This slide deck started life as a clone of Jeff Sheets' August 2013 talk
              ul
                li 
                  a(href="http://jeffsheets.github.io/JavaTesting2013Slides", target="_blank") jeffsheets/JavaTesting2013Slides
                ul
                  li Many, many thanks Jeff!

          section
            h2 About Me
            ul
              li 
                | Software Engineer at 
                a(href="http://Solutionary.com",target="_blank") Solutionary
              li 
                i.icon-twitter &nbsp;
                a(href="https://twitter.com/MattPayneOrg", target="_blank") @MattPayneOrg
              li 
                i.icon-github &nbsp;
                a(href="https://github.com/payne", target="_blank") @payne
                li Website &nbsp;
                a(href="http://MattPayne.org/", target="_blank") http://MattPayne.org
                li Payne@MattPayne.org
                
        section
            h2 Talk Outline 
            ol
              li 5WH: What, Why, Where, Who, When, and How
              li Using and demoing gradle {
                i.icon-smile}
              ol
                //TODO: type=a
                li From scatch
                li Eclipse Plugin
                li What about maven and ant?
                li Multiproject builds
                li Multiple language builds
              li Review shortcuts, tips, and tricks
              li Maven broken?
              li References

              hr
              h3 Please ask questions and make suggestions!
              ul
                li "Everyone in this room is an expert!" 
                  ul
                    li Jeff Sheets' great observation from 8/20/2013

        section
            h2 What is gradle?

        section
                section
                    h2 Why use gradle?
                    ol
                      li Gradle manifesto:
                      div Make the impossible possible, make the possible easy and make the easy elegant.
                        ul
                          li (inspired by Moshe Feldenkrais)
                section
                  h2 TAM!
                  h3 Technology Acceptance Model


        section
            h2 Where is gradle being used?
            ol
              li Put in some stuff about adoption curves 
              li Add the list of projects and companies that use gradle

        section
            h2 Who is who in the gradle zoo?
            ol 
              li TB
              li Main Gradle person
              li GradleWare.com

        section
            h2 When is gradle ready to use?
            p Now
            ol 
              li Reason 1
              li Reason 2
            p Roadmap
            p Conferences

        section
          section
              h2 How to get started using gradle? From...
              ol 
                li Command line
                li Eclipse
                li maven
                li ant
                li multi project
                li multi language

          section
              h2 Gradle on the command line
              ol
                li Hello world project
                li Turning project into an eclipse project

          section
            h2 First gradle: the source
            div Hello.java
            pre.
              <code data-trim contenteditable>
              package demo;

              /* ... */
              public class Hello {
    
                public static void main(String[] args) {
                  System.out.format("Hello world\n");
                }
              }
              </code>

          section
            h2 First gradle: the build file
            div build.gradle
            pre.
              <code data-trim contenteditable>
              apply plugin: 'java'
              </code>

          section
              h2 First gradle: the session
              pre.
                <code data-trim contenteditable>
                mkdir -p src/main/java/demo
                cat > src/main/java/demo/Hello.java 
                cat > gradle.build
                tree
                gradle build
                gradle build
                gradle -daemon build
                gradle build
                java -cp build/libs/first.jar demo.Hello
                </code>
              ol
                li Let's note the timing differences
                  ul
                    li Tip 1: gradle's daemon makes things "faster"
                li gradle build does several things
                  ul
                    li Compile
                    li Build jar
                    li Run tests
                    li Build test report
                

          section
            h2 That's a lot of files
            ol 
              li gradle clean; find * | wc -l # output 6
              li gradle build; find * | wc -l # output 17
              img(src="assets/img/tree1.png")

          section
            h3 gradle tasks: That's a lot of tasks
            h3 Not a lot of gradle
            pre.
              <code>
              mpayne-mbp:first mpayne$ cat build.gradle 
              apply plugin: 'java'
              mpayne-mbp:first mpayne$
              </code>
          section
            h2 special tasks
            h3 Build Setup tasks
            ol
              li setupBuild - Initializes a new Gradle build. [incubating]
              li wrapper - Generates Gradle wrapper files. [incubating]

          section
            h2 Dependency management: the source
            div DemoBeanUtils.java
            pre.
              <code data-trim contenteditable>
              package demo;
              import org.apache.commons.beanutils.BeanUtils;

              /* ... */
              public class MainBeanUtilsDemo {
                private String jdbcDriverClass, dbUrl, dbUser, dbPassword;
    
                public MainBeanUtilsDemo(String[] args) throws FileNotFoundException,
                  IOException, IllegalAccessException, InvocationTargetException {

                  this.strPropertyFileName = args.length > 0 ? args[0] : "jdbc.properties";
                  Properties properties = new Properties();
                  properties.load(new FileReader(strPropertyFileName));
                  BeanUtils.populate(this, properties);
                  System.out.format("user=%s password=%s\n", dbUser, dbPassword);
                }
              }
              </code>

          section
            h2 Dependency management: the build file
            div build.gradle
            pre.
              <code data-trim contenteditable>
              apply plugin: 'java'
              repositories { mavenCentral() }

              dependencies { 
                  compile 'commons-beanutils:commons-beanutils:1.8.3'
              }
              </code>

          section
              h2 Dependency management: the session
              pre.
                <code data-trim contenteditable>
                mkdir -p src/main/java/demo # redundant
                cat > src/main/java/demo/MainBeanUtilsDemo.java 
                cat > gradle.build
                echo 'org.gradle.daemon=true' > gradle.properties
                gradle build # Don't need the --daemon now
                </code>
              ol
                li Let's note the timing differences
                  ul
                    li Tip 2: Use gradle.properties to always use the daeomn
                      ul
                        li gradle's daemon makes things "faster"
                li gradle.properties can be located in several places
                  ol
                    li next to build.gradle
                    li in ${HOME}
                li 
                  a(href="http://www.gradle.org/docs/current/userguide/build_environment.html",target="_blank") User Guide Chapter 20: The Build Environment
                
          section
              h2 Dependency management: Running 
              ul 
                li Let's use gradle to run our code 
                li Folks manage the classpath like this with ant and maven too...
              pre.
                <code data-trim contenteditable>
                apply plugin: 'java'
                repositories { mavenCentral() }

                dependencies { 
                    compile 'commons-beanutils:commons-beanutils:1.8.3'
                }

                task BeanDemo(type: JavaExec) {
                  main='demo.MainBeanUtilsDemo'
                  classpath=runtimeClasspath
                }
                </code>
              ol
                li gradle BeanDemo
                li gradle BD
                ul
                  li Tip 3: The CamelCaseShortCut (CCSC)

          section
            h2 Using gradle's eclipse plugin
            ol
              li add "apply plugin: 'eclipse'" to your build.gradle
              li gradle eclipse
              li In eclipse, import existing eclipse project
              li joy 
                i.icon-smile

            h2 Next, Using eclipse's gradle plugin

          section
              h2 Using eclipse's gradle plugin
              ol
                li 
                a(href="http://www.gradle.org/tooling") Gradle tooling
                li 
                a(href="https://marketplace.eclipse.org/content/gradle-integration-eclipse") Gradle Integration for Eclipse
                ul
                  li I did not install the Spring Dashboard
                  li github.com/spring-projects/eclipse-integration-gradle/
                li 
                  img(src="assets/img/eclipse-marketplace.png")
              

          section
              h2 Converting a maven project

          section
              h2 Reusing ant goals

          section
            h2 Traditional JUnit
            div CarRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              //Setup your Eclipse Favorites for code suggestions
              import static org.junit.Assert.assertEquals;
              
              /* ... */
              
              assertEquals(2013, result.getYear().intValue());
              assertEquals("JunitMotors", result.getMake().getName());
              assertEquals(make.getId(), result.getMake().getId());
              assertEquals(car.getDescription(), result.getDescription());
              </code>

        section
            h2 Review shortcuts, tips, and tricks
            ul
              li Tip 1: daemon
              li Tip 2: gradle.properties
              ul
                li always turn the daemon on
              li Tip 3: The CamelCaseShortCut (CCSC)
              li Tip 4: default task
              li apply from http
              ul
                li common settings for projects on your whole team
              li eclipse plugin: URL

        section
            h2 Maven broken?

        section
            h2 References

    script(src="./assets/js/app.js")
